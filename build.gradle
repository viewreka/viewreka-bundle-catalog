buildscript {
    ext {
        springBootVersion = '1.3.2.RELEASE'
    }
    repositories {
        jcenter()
    }
    configurations {
        compile.exclude module: "spring-boot-starter-tomcat"
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}
plugins {
//    id "fi.jasoft.plugin.vaadin" version "0.10.6"
    id "com.dorongold.task-tree" version "1.2.1"
    id 'com.gradle.build-receipt' version '1.0'
}
buildReceiptLicense {
    agreementUrl = 'https://gradle.com/terms-of-service'
    agree = 'yes'
}

apply plugin: 'groovy'
apply plugin: 'spring-boot'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    jcenter()
    maven {
        url "http://maven.vaadin.com/vaadin-addons"
    }
}

group = 'org.beryx.viewreka'

jar {
    baseName = 'viewreka-bundle-catalog'
    version = viewrekaBundleCatalogVersion
}

def defaultEncoding = 'UTF-8'
[compileJava, compileTestJava]*.options*.encoding = defaultEncoding
[compileGroovy, compileTestGroovy]*.options*.encoding = defaultEncoding
[compileGroovy, compileTestGroovy]*.groovyOptions*.encoding = defaultEncoding

sourceSets.main.java.srcDirs = []
sourceSets.main.groovy.srcDirs = ["src/main/java", "src/main/groovy"]
sourceSets.test.java.srcDirs = []
sourceSets.test.groovy.srcDirs = ["src/test/java", "src/test/groovy"]

task wrapper(type: Wrapper) {
    gradleVersion = '2.9'
}

dependencies {
    compile "org.beryx.viewreka:viewreka-bundle-repo:$viewrekaVersion"

    compile "org.springframework.boot:spring-boot-starter-undertow"
    compile "org.springframework.boot:spring-boot-starter-web"
    compile "org.springframework.boot:spring-boot-starter-actuator"
    compile "org.springframework.boot:spring-boot-starter-jdbc"
    compile "com.vaadin:vaadin-spring-boot-starter:1.0.0"

    compile "com.vaadin:vaadin-client-compiler:$vaadinVersion"
    compile "org.vaadin.addon:confirmdialog:2.1.3"
    compile "org.vaadin:resetbuttonfortextfield:1.2.1"

    compile "org.codehaus.groovy:groovy-all:2.4.+"

    compile 'com.github.scribejava:scribejava-apis:2.1.0'
    compile 'com.google.code.gson:gson:2.5'

    runtime 'org.apache.derby:derby:10.+'
    
    testCompile "org.springframework.boot:spring-boot-starter-test"
    testCompile ('org.spockframework:spock-core:1.0-groovy-2.4') {
        exclude module: 'groovy-all'
    }
    testCompile 'cglib:cglib-nodep:3.2.+'
    testCompile 'org.objenesis:objenesis:2.+'
}

dependencyManagement {
    imports {
        mavenBom "com.vaadin:vaadin-bom:$vaadinVersion"
    }
}

springBoot {
    mainClass = "org.beryx.viewreka.bundle.catalog.CatalogApplication"
}

task cleanVaadin(type: Delete) {
    delete 'src/main/resources/VAADIN'
}

tasks.clean.dependsOn cleanVaadin

task compileViewrekaTheme(type: JavaExec) {
    doFirst {
        copy {
            from 'themes'
            into 'src/main/resources/VAADIN/themes'
        }
    
    }
  classpath = configurations.compile
  main = 'com.vaadin.sass.SassCompiler'
  args 'src/main/resources/VAADIN/themes/viewreka/styles.scss', 'src/main/resources/VAADIN/themes/viewreka/styles.css'
}

task compileWidgetSet(type: JavaExec) {
    doFirst {
        file('src/main/resources/VAADIN/widgetsets').mkdirs()
    }
    classpath { [ file('src/main/resources'), configurations.compile ] }
    main = 'com.google.gwt.dev.Compiler'
    args 'org.beryx.viewreka.bundle.catalog.CatalogWidgetSet', '-war', "src/main/resources/VAADIN/widgetsets", '-logLevel', 'WARN'
}

tasks.processResources.dependsOn compileViewrekaTheme, compileWidgetSet

def readFromConsole(prompt) {
    readFromConsole('', prompt)
}
def readFromConsole(header, prompt) {
    def console = System.console()
    if (console) {
        if(header) {
            console.printf "\n\n# $header\n"
        }
        String value = null;
        while(!value?.trim()) {
            value = console.readLine("> $prompt: ")
        }
        return value
    } else {
        throw new GradleException("Cannot get console.")
    }
}

def configureAuthFile(String serviceName, String appSettingsUrl) {
    def clientId= readFromConsole("Please enter the credentials of your $serviceName application (from $appSettingsUrl)", 'client ID')
    def secret= readFromConsole('secret')
    def authFile = file("src/main/resources/${serviceName.toLowerCase()}.auth")
    authFile.delete()
    authFile << /
    {
        "clientId" : "$clientId",
        "secret" : "$secret"
    }/.stripIndent()
}

task configureGitHubAuth << {
    configureAuthFile 'GitHub', 'https://gitihub.com/settings/applications/ or https://github.com/organizations/<your_organization>/settings/applications'
}

task configureLinkedInAuth << {
    configureAuthFile 'LinkedIn', 'https://www.linkedin.com/secure/developer'
}

task configureGoogleAuth << {
    configureAuthFile 'Google', 'https://console.developers.google.com/apis/credentials'
}

task configureMicrosoftAuth << {
    configureAuthFile 'Microsoft', 'https://account.live.com/developers/applications'
}
